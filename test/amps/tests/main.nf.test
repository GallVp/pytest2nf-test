nextflow_process {

    name "Test Process AMPS"
    config "./nextflow.config"
    script "../main.nf"
    process "AMPS"
   
    tag "modules"
    tag "unzip"
    tag "malt"
    tag "malt/build"
    tag "malt/run"
    tag "maltextract"
    tag "amps"
   
    setup {
        run("UNZIP", alias: "UNZIP_MALT") {
            script "../../../modules/nf-core/unzip/main.nf"
            
            process {
                """
                input[0] = [[],file("s3://ngi-igenomes/test-data/createtaxdb/taxonomy/megan-nucl-Feb2022.db.zip",checkIfExists:true)]
                """
            }
        }
        
        run("UNZIP", alias: "UNZIP_MALTEXTRACT") {
            script "../../../modules/nf-core/unzip/main.nf"
            
            process {
                """
                input[0] = [[],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/ncbi_taxmap.zip',checkIfExists:true)]
                """
            }
        }
        
        run("MALT_BUILD") {
            script "../../../modules/nf-core/malt/build/main.nf"
            params {
                module_args = "--sequenceType DNA"
            }
            
            process {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta',checkIfExists:true)
                input[1] = []
                input[2] = UNZIP_MALT.out.unzipped_archive.map{it[1]}
                """
            }
        }
        
        run("MALT_RUN") {
            script "../../../modules/nf-core/malt/run/main.nf"
            params {
                module_args = "-m BlastN -J-Xmx8G"
            }
            
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz',checkIfExists:true)
                    ]
                input[1] = MALT_BUILD.out.index
                """
            }
        }
        
        run("MALTEXTRACT") {
            script "../../../modules/nf-core/maltextract/main.nf"
            params {
                module_args = '-f def_anc'
            }
            
            process {
                """
                input[0] = MALT_RUN.out.rma6.map{it[1]}
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt',checkIfExists:true)
                input[2] = UNZIP_MALTEXTRACT.out.unzipped_archive.map{it[1]}
                """
            }
        }
    }
    
    test("test_amps") {
        
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = MALTEXTRACT.out.results
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt',checkIfExists:true)
                input[2] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_amps -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = MALTEXTRACT.out.results
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt',checkIfExists:true)
                input[2] = false
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}